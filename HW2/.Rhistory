}
for (year in seq(1972,2016,5)){
print (year)
}
mydata[paste0(year)]
mean(mydata[paste0(year)])
mydata[paste0(year)]+1
mydata[paste0(year)]
mydata[paste0(year)]+1
prod(mydata[paste0(year)]+1)
for (year in seq(1972,2016,5)){
count = count + 1
5year.a[count] = mean(mydata[paste0(year)])*365
5year.g[count] = prod(mydata[paste0(year)]+1)
}
5year.a = double()
#5 Year return
count = 0
five.year.a = double()
five.year.g = double()
for (year in seq(1972,2016,5)){
count = count + 1
five.year.a[count] = mean(mydata[paste0(year)])*365
five.year.g[count] = prod(mydata[paste0(year)]+1)
}
five.year.a
library(readr)
library(xts)
p5_sp500 <- read_csv("Desktop/400- Investment/HW5/p5-sp500.csv")
p5_sp500$caldt = as.Date(as.character(p5_sp500$caldt),"%Y%m%d")
##Daliy retrun
#prod(p5_sp500$vwretd+1)^(365/dim(p5_sp500)[1])
prod(p5_sp500$vwretd+1)^(1/45)
(mean(p5_sp500$vwretd)+1)^(dim(p5_sp500)[1]/45)
##Daliy retrun
#prod(p5_sp500$vwretd+1)^(365/dim(p5_sp500)[1])
daily.a = prod(p5_sp500$vwretd+1)^(1/45)
##Daliy retrun
#prod(p5_sp500$vwretd+1)^(365/dim(p5_sp500)[1])
daily.a = (mean(p5_sp500$vwretd)+1)^(365)-1
daily.g = prod(p5_sp500$vwretd+1)^(365/dim(p5_sp500)[1])
mydata = xts(p5_sp500$vwretd, order.by =p5_sp500$caldt )
count = 0
monthly.a = double()
monthly.g = double()
for (year in 1972:2016)
for (month in 1:12){
count = count + 1
monthly.a[count] = mean(mydata[paste0(year,"-",month)])*30
monthly.g[count] = prod(mydata[paste0(year,"-",month)]+1)
}
mean( monthly.a)
mean( monthly.a)*12
Monthly.Geometric = prod(monthly.g[count]+1)^(1/45)
mydata = xts(p5_sp500$vwretd, order.by =p5_sp500$caldt )
count = 0
monthly.a = double()
monthly.g = double()
for (year in 1972:2016)
for (month in 1:12){
count = count + 1
monthly.a[count] = mean(mydata[paste0(year,"-",month)])*30
monthly.g[count] = prod(mydata[paste0(year,"-",month)]+1)-1
}
monthly.g[count]
monthly.g+1
prod(monthly.g+1)
prod(monthly.g+1)^(1/45)
#Yearly - annualization
Yearly.Arithemetic = mean(yearly.a)
count = 0
yearly.a = double()
yearly.g = double()
for (year in 1972:2016){
count = count + 1
yearly.a[count] = mean(mydata[paste0(year)])*365
yearly.g[count] = prod(mydata[paste0(year)]+1)
}
#Yearly - annualization
Yearly.Arithemetic = mean(yearly.a)
prod(yearly.g+1)
count = 0
yearly.a = double()
yearly.g = double()
for (year in 1972:2016){
count = count + 1
yearly.a[count] = mean(mydata[paste0(year)])*365
yearly.g[count] = prod(mydata[paste0(year)]+1)-1
}
prod(yearly.g+1)/45
prod(yearly.g+1)
prod(yearly.g+1)^(1/45)
count = 0
five.year.a = double()
five.year.g = double()
for (year in seq(1972,2016,5)){
count = count + 1
five.year.a[count] = mean(mydata[paste0(year)])*365
five.year.g[count] = prod(mydata[paste0(year)]+1)-1
}
fiveYear.Geometric = prod(five.year.g+1)^(1/45)
count = 0
five.year.a = double()
five.year.g = double()
for (year in seq(1972,2016,5)){
count = count + 1
five.year.a[count] = mean(mydata[paste0(year)])*365
five.year.g[count] = prod(mydata[paste0(year)]+1)-1
}
#five - Year - annualization
fiveYear.Arithemetic = mean(five.year.a)/5
fiveYear.Geometric = prod(five.year.g+1)^(1/45)
fiveYear.Geometric = prod(five.year.g+1)^(1/9)
12*45
540/12
Monthly.Geometric = prod(monthly.g+1)^(12/540)
Yearlyy.Geometric = prod(yearly.g+1)^(1/45)
Yearlyy.Geometric = prod(yearly.g+1)^(1/45)
fiveYear.Geometric = prod(five.year.g+1)^(1/9)
fiveYear.Geometric = prod(five.year.g+1)^(1/9)
fiveYear.Geometric = prod(five.year.g+1)
prod(five.year.g+1)
prod(mydata[paste0(year)]+1)-1
paste0(year, year+1, year+2, year+3, year+4)]
mydata[paste0(year, year+1, year+2, year+3, year+4)]
mydata[paste0(year, year+1, year+2, year+3, year+4)]
year
year+1
mydata[year, year+1, year+2, year+3, year+4]
mydata[2012]
mydata["2012"]
mydata["2012-2013"]
mydata["2012","2013"]
mydata["2012"]
mydata[paste0(year)]
mydata[paste0(year+1)]
mydata[paste0(year)] + mydata[paste0(year+1)
mydate[c("2012")]
mydate["2012"]
mydata["2012"]
mydata[c("2012")]
mydata[c("2012","2013")]
(paste0(year, year+1)
)
c("year", "year+1")
c(year, year+1)
c(paste0(year), paste0(year+1),paste0(year+2),paste0(year+3), paste0(year+4))
mydata[c(paste0(year), paste0(year+1),paste0(year+2),paste0(year+3), paste0(year+4))]
count = 0
five.year.a = double()
five.year.g = double()
for (year in seq(1972,2016,5)){
count = count + 1
five.year.a[count] = mean(mydata[c(paste0(year), paste0(year+1),paste0(year+2),paste0(year+3), paste0(year+4))])
five.year.g[count] = prod(mydata[c(paste0(year), paste0(year+1),paste0(year+2),paste0(year+3), paste0(year+4))]+1)-1
}
#five - Year - annualization
fiveYear.Arithemetic = mean(five.year.a)/45
count = 0
five.year.a = double()
five.year.g = double()
for (year in seq(1972,2016,5)){
count = count + 1
five.year.a[count] = mean(mydata[c(paste0(year), paste0(year+1),paste0(year+2),paste0(year+3), paste0(year+4))])*365
five.year.g[count] = prod(mydata[c(paste0(year), paste0(year+1),paste0(year+2),paste0(year+3), paste0(year+4))]+1)-1
}
fiveYear.Arithemetic = mean(five.year.a)
fiveYear.Geometric = prod(five.year.g+1)
fiveYear.Geometric = prod(five.year.g+1)^(1/45)
##Daliy retrun
#prod(p5_sp500$vwretd+1)^(365/dim(p5_sp500)[1])
Daily.Arithemetic = (mean(p5_sp500$vwretd)+1)^(365)-1
##Daliy retrun
#prod(p5_sp500$vwretd+1)^(365/dim(p5_sp500)[1])
Daily.Arithemetic = (mean(p5_sp500$vwretd)+1)^(365)-1
Daily.Geometric = prod(p5_sp500$vwretd+1)^(365/dim(p5_sp500)[1])
mydata = xts(p5_sp500$vwretd, order.by =p5_sp500$caldt )
count = 0
monthly.a = double()
monthly.g = double()
for (year in 1972:2016)
for (month in 1:12){
count = count + 1
monthly.a[count] = mean(mydata[paste0(year,"-",month)])*30
monthly.g[count] = prod(mydata[paste0(year,"-",month)]+1)-1
}
#Month return - annualization
Monthly.Arithemetic = mean( monthly.a)*12
Monthly.Geometric = prod(monthly.g+1)^(12/540)
Monthly.Geometric = prod(monthly.g+1)^(12/540)-1
Monthly.Geometric = prod(monthly.g+1)^(12/540)-1
count = 0
yearly.a = double()
yearly.g = double()
for (year in 1972:2016){
count = count + 1
yearly.a[count] = mean(mydata[paste0(year)])*365
yearly.g[count] = prod(mydata[paste0(year)]+1)-1
}
#Yearly - annualization
Yearly.Arithemetic = mean(yearly.a)
Yearlyy.Geometric = prod(yearly.g+1)^(1/45)
#Yearly - annualization
Yearly.Arithemetic = mean(yearly.a)
Yearlyy.Geometric = prod(yearly.g+1)^(1/45)
Yearlyy.Geometric = prod(yearly.g+1)^(1/45)
count = 0
five.year.a = double()
five.year.g = double()
for (year in seq(1972,2016,5)){
count = count + 1
five.year.a[count] = mean(mydata[c(paste0(year), paste0(year+1),paste0(year+2),paste0(year+3), paste0(year+4))])*365
five.year.g[count] = prod(mydata[c(paste0(year), paste0(year+1),paste0(year+2),paste0(year+3), paste0(year+4))]+1)-1
}
#five - Year - annualization
fiveYear.Arithemetic = mean(five.year.a)
fiveYear.Geometric = prod(five.year.g+1)^(1/45)
fiveYear.Geometric = prod(five.year.g+1)^(1/45)-1
?quantmod
install.packages(quantmod)
install.packages('quantmod')
#install.packages('quantmod')
library(quantmod)
?quantmod
?`quantmod-package`
getSymbols("YHOO",src="google")
getSymbols("MSFT",src="yahoo") # from yahoo finance
View(MSFT)
View(MSFT)
View(MSFT)
View(MSFT)
getSymbols("MSFT",src="yahoo") # from yahoo finance
MSFT[1990]
MSFT["1990"]
require(quantmod)
getSymbols("YHOO",src="google") # from google finance
getSymbols("GOOG",src="yahoo") # from yahoo finance
getSymbols("DEXUSJP",src="FRED") # FX rates from FRED
getSymbols("XPT/USD",src="Oanda") # Platinum from Oanda Sort of handy, but it gets better... > # Specify lookup parameters, and save for future sessions.
setSymbolLookup(YHOO='google',GOOG='yahoo')
setSymbolLookup(DEXUSJP='FRED')
setSymbolLookup(XPTUSD=list(name="XPT/USD",src="oanda"))
saveSymbolLookup(file="mysymbols.rda")
# new sessions call loadSymbolLookup(file="mysymbols.rda")
getSymbols(c("YHOO","GOOG","DEXUSJP","XPTUSD"))
getSymbols("MSFT",src="yahoo") # from yahoo finance
barChart("MSF")
barChart(MSFT)
getSymbols.yahoo("MSFT", env, from = "2007-01-01")
getSymbols.yahoo("MSFT", from = "2007-01-01")
getSymbols.yahoo("MSFT",env=globalenv(), from = "2007-01-01")
View(MSFT)
)
getSymbols.yahoo("MSFT",env=globalenv(), from = "1989-12-29", to = "2018-09-28")
View(MSFT)
View(MSFT)
getSymbols.yahoo("MSFT",env=globalenv(), from = "1989-12-29", to = "2018-09-29")
View(MSFT)
View(MSFT)
to.weekly(MSFT)
getDividends("MSFT",env=globalenv(), from = "1989-12-29", to = "2018-09-29")
# Load data from Yahoo finance
getSymbols.yahoo("MSFT",env=globalenv(), from = "1989-12-29", to = "2018-09-29")
getDividends("MSFT",env=globalenv(), from = "1989-12-29", to = "2018-09-29")
DIV = getDividends("MSFT",env=globalenv(), from = "1989-12-29", to = "2018-09-29")
View(DIV)
View(DIV)
to.weekly(MSFT)
to.weekly(MSFT$MSFT.Close)
MSFT$MSFT.Close
to.weekly(MSFT$MSFT.Close)
to.weekly(MSFT[,MSFT.Close])
MSFT[,MSFT.Close]
MSFT[MSFT.Close,]
MSFT[,MSFT.Close]
ls
read.csv(data.csv)
read.csv(data.csv)
read.csv(data)
read.csv("data.csv")
read.csv("data")
read.csv(file = data.csv)
read.csv(file = 'data.csv')
data <- read_csv("Desktop/404 Coorperate Finance /HW1/data.csv")
# 404 coorperate finance
library(readr)
data <- read_csv("Desktop/404 Coorperate Finance /HW1/data.csv")
View(data)
as.Date(data.csv)
as.Date(data$caldt)
View(data)
?as.Date
as.Date(data$caldt, format(%Y%m%d))
xts(data[,-1], order.by=as.Date(DBV$Date))
data[,-1]
xts(data[,-1], order.by=as.Date(data$caldt))
library(quantmod)
xts(data[,-1], order.by=as.Date(data$caldt))
data$caldt
xts(data[,-1], order.by=as.Date(data$caldt,format(%Y%m%d)))
as.Date(data$caldt)
as.Date(data$caldt, format("%Y%m%d"))
as.Date(data$caldt, format("%Y %m %d"))
as.Date(data$caldt,"%Y %m %d")
as.Date(data$caldt,"%Y%m%d")
View(data)
as.Date(as.character(data$caldt,"%Y%m%d"))
as.Date(as.character(data$caldt),"%Y%m%d")
data$caldt = as.Date(as.character(data$caldt),"%Y%m%d")
xts(data[,-1], order.by=as.Date(data$caldt))
View(data)
View(data)
diff(data$caldt)
# Total period of holding period return
Q1.return.1 = diff(data$vwindd)
diff(data$vwindd)
diff(data$vwindd)
# Total period of holding period return
Q1.return.1 = shift(data$vwindd)/
# Total period of holding period return
Q1.return.1 = shift(data$vwindd)
# Total period of holding period return
Q1.return.1 = back(data$vwindd)
# Total period of holding period return
Q1.return.1 = shift(data$vwindd)
shift(data$vwindd)
shift(data$caldt)
# Total period of holding period return
Q1.return.1 = size(diff(data$vwindd))
diff(data$vwindd)
size(diff(data$vwindd))
?size
??size
# Total period of holding period return
Q1.return.1 = diff(data$vwindd)
# Total period of holding period return
Q1.return.1 = diff(data$vwindd)/data$vwindd
diff(data$vwindd)/data$vwindd
type (diff(data$vwindd))
# Total period of holding period return
Q1.return.1 = lag(data$vwindd)/data$vwindd
lag(data$vwindd)
View(data)
lag(data$vwindd)
lag(data$vwindd)
# Total period of holding period return
Q1.return.1 = diff(data$vwindd)/lag(data$vwindd,1)
shift(data$vwindd, n=1, fill=NA, type="lag")
library(data.table)
# Total period of holding period return
Q1.return.1 = diff(data$vwindd)/shift(data$vwindd)
shift(data$vwindd)
diff(data$vwindd)
diff(data$vwindd)
# Total period of holding period return
Q1.return.1 = diff(data$vwindd)/data$vwindd
diff(data$vwindd)/data$vwindd
# Total period of holding period return
yearlyReturn(data$caldt)
# Total period of holding period return
yearlyReturn(data$caldt)
data$caldt
# Total period of holding period return
yearlyReturn(data$vwindd)
# data cleaning
data$caldt = as.Date(as.character(data$caldt),"%Y%m%d")
xts(data[,-1], order.by=as.Date(data$caldt))
data <- read_csv("Desktop/404 Coorperate Finance /HW1/data.csv")
# data cleaning
data$caldt = as.Date(as.character(data$caldt),"%Y%m%d")
xts(data[,-1], order.by=as.Date(data$caldt))
yearlyReturn(data$vwindd)
View(data)
data = xts(data[,-1], order.by=as.Date(data$caldt))
type(data)
class(data)
yearlyReturn(data$vwindd)
diff(data$vwindd)/data$vwindd
diff(data$vwindd)
diff(data$vwindd)/shift(data$vwindd)
yearlyReturn(data$vwindd)
Q1.return.1 = yearlyReturn(data$vwindd)
Q1.return.2 = yearlyReturn(data$ewindd)
Q1.return.3 = yearlyReturn(data$CAP1IND)
Q1.return.4 = yearlyReturn(data$CAP10IND)
#Q2
arith.ave.1 = mean(Q1.return.1)
arith.ave.2 = mean(Q1.return.2)
arith.ave.3 = mean(Q1.return.3)
arith.ave.4 = mean(Q1.return.4)
mean(Q1.return.1)
sd(Q1.return.1)
#Q3
sd.1 = sd(Q1.return.1)
sd.2 = sd(Q1.return.2)
sd.3 = sd(Q1.return.3)
sd.4 = sd(Q1.return.4)
data$vwindd[1]
data$vwindd/ data$vwindd[1]
Q1.return.1 = data$vwindd/( data$vwindd[1])
data$vwindd/( data$vwindd[1])
data$vwindd[1]
data$vwindd
data$vwindd - data$vwindd[1]
data$vwindd
data$vwindd - 1
as.numeric(data$vwindd[1])
data$vwindd - as.numeric(data$vwindd[1])
data$vwindd
as.numeric(data$vwindd[1])
data <- read_csv("Desktop/404 Coorperate Finance /HW1/data.csv")
# data cleaning
data$caldt = as.Date(as.character(data$caldt),"%Y%m%d")
data = xts(data[,-1], order.by=as.Date(data$caldt))
# Q1
# Total period of holding period return
Q1.return.1 = diff(data$vwindd)/shift(data$vwindd)
Q1.return.1 = data$vwindd - as.numeric(data$vwindd[1])
View(data)
Q1.return.1 = (data$vwindd - as.numeric(data$vwindd[1]))/data$vwindd
Q1.return.1
Q1.return.1 = (data$vwindd - as.numeric(data$vwindd[1]))/as.numeric(data$vwindd[1])
Q1.return.1
Q1.return.1 = (data$vwindd - as.numeric(data$vwindd[1]))/as.numeric(data$vwindd[1])
Q1.return.2 = (data$ewindd - as.numeric(data$ewindd[1]))/as.numeric(data$ewindd[1])
Q1.return.3 = (data$CAP1IND - as.numeric(data$CAP1IND[1]))/as.numeric(data$CAP1IND[1])
Q1.return.4 = (data$CAP10IND - as.numeric(data$CAP10IND[1]))/as.numeric(data$CAP10IND[1])
#Q2
Q1.return.1 = yearlyReturn(Q1.return.1)
Q1.return.2 = yearlyReturn(Q1.return.2)
Q1.return.3 = yearlyReturn(Q1.return.3)
Q1.return.4 = yearlyReturn(Q1.return.4)
Q1.return.1
#Q2
Q1.return.1 = yearlyReturn(data$vwindd)
Q1.return.2 = yearlyReturn(data$ewindd)
Q1.return.3 = yearlyReturn(data$CAP1IND)
Q1.return.4 = yearlyReturn(data$CAP10IND)
Q1.return.1
mean(Q1.return.1)
Q1.return.1 + 1
# Q4 geometric rate of return
geom.ave.1 = prod(Q1.return.1 + 1 )
prod(Q1.return.1 + 1 )
(data$vwindd - as.numeric(data$vwindd[1]))/as.numeric(data$vwindd[1])
prod(Q1.return.1 + 1 )
# Q4 geometric rate of return
geom.ave.1 = prod(Q1.return.1 + 1 ) - 1
arith.ave.2 = prod(Q1.return.2 + 1 ) - 1
arith.ave.3 = prod(Q1.return.3 + 1 ) - 1
arith.ave.4 = prod(Q1.return.4 + 1 ) - 1
prod(Q1.return.1 + 1 ) - 1
prod(Q1.return.2 + 1 ) - 1
prod(Q1.return.3 + 1 ) - 1
# Q4 geometric rate of return
geom.ave.1 = prod(Q1.return.1 + 1 ) - 1
geom.ave.2 = prod(Q1.return.2 + 1 ) - 1
geom.ave.3 = prod(Q1.return.3 + 1 ) - 1
geom.ave.4 = prod(Q1.return.4 + 1 ) - 1
setwd("~/Desktop/405 Computational Methods/HW2")
library(readr)
Q5a <- read_csv("Q5a.csv")
View(Q5a)
plot (Q5a)
Q5a[1,]
Q5a[,1]
plot(Q5a[,1])
plot(Q5a[,])
plot(Q5a[,1:100])
plot(Q5a[,1:1])
plot(Q5a[,1])
Q5a[,1]
plot (x = 1:10)
plot (x = 1:10 , y = Q5a[,1])
size( Q5a[,1])
sizeof( Q5a[,1])
size(1:10)
length(1:10)
length(Q5a[,1])
length(Q5a[,10])
length(Q5a[,11234])
length(Q5a[,112])
View(Q5a)
plot(Q5a[1,])
3
plot(Q5a[1,3])
read_csv("Q5a.csv")
View(Q5a)
plot (x = 1:10)
plot (x = 1:10, y = rnorm(10))
plot (x = 1:10, y = data[,10])
data[,10]
data[,1])
data[,1]
class(data)
.
data = read_csv("Q5a.csv")
class(data)
data[88]
data[100]
plot (x = 1:10, y = data[1])
length(data[100])
length(data[100])
as.array(data)
data[100]
length(data[100])
plot(data[100])
plot(1:10 , data[100])
plot (x = c(1:10), y = data[1])
plot(data[10] , data[100])
length(data[100])
plot(data[10] , data[100])
